#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jan 25 15:56:26 2020

@author: willy
"""

import os
import sys
import json
import time
import math
import requests
import pandas as pd
import urllib.request
from flask import Flask, flash, request, redirect, render_template
from flask import Response
from flask import stream_with_context
from werkzeug.utils import secure_filename

APIKEY = "a05b04fcb36ebe084bd2aeaa0d6910df5f1fce25deed72303bada6580b493717"
URL_BASE = "https://www.virustotal.com/vtapi/v2/"
HTTP_OK = 200
PUBLIC_API_SLEEP_TIME = 60
NUM_ITEMS = 1000 #10 #100

COLS = ["percent_ans", "percent_ans_lab", "Scan_id", "Status_code", "Response_code",
        "Date", "Version", "Commentaire"]
COLS_NOTBOOL = ["Version", "Date", "Status_code", "Scan_id", 
                "Commentaire", "Response_code"]


UPLOAD_FOLDER = './upload_files'
ALLOWED_EXTENSIONS = set(['json'])

###############################################################################
#       get result of file analysis from virusTotal ---> Debut
###############################################################################
def get_report(filename):
    """
    get report of various apps in the filename list.
    
    @params : 
        filename : a json file
    """
    url = URL_BASE + "file/report"
    params = {"apikey":APIKEY}
    
    malwares_list = list()
    with open(filename) as json_file:
        malwares_list = json.load(json_file)
        
    dicos = dict()
    for i, malware in enumerate(malwares_list[:NUM_ITEMS]):
        try:
            params["resource"] = malware["app_sha1_sig"]
            print("processing the i={}-th app".format(i))
            
            response = requests.get(url, params=params)
    
            dico_tmp = {"Version": malware["app_version"], 
                        "Date": malware["date"],
                        "Status_code": response.status_code}
            
            if response.status_code == 200:
                dico_tmp["Commentaire"] = "OK."
                dico_tmp["Scan_id"] = response.json()["scan_id"]
                dico_tmp["Response_code"] = response.json()["response_code"]
                print("i={} 200".format(i))
                for antivirus, res in response.json()["scans"].items():
                    dico_tmp[antivirus] = res["detected"]
            elif response.status_code == 204:
                    print("i={} 204".format(i))
                    dico_tmp["Scan_id"] = None
                    dico_tmp["Commentaire"] = "Request rate limit exceeded."
                    dico_tmp["Response_code"] = None
            elif response.status_code == 400:
                print("i={} 400".format(i))
                dico_tmp["Scan_id"] = None
                dico_tmp["Commentaire"] = "Bad Request."
                dico_tmp["Response_code"] = None
            elif response.status_code == 403:
                print("i={} 403".format(i))
                dico_tmp["Scan_id"] = ""
                dico_tmp["Commentaire"] = "No privileges to make the request."
                dico_tmp["Response_code"] = None
            else:
                dico_tmp["Scan_id"] = None
                dico_tmp["Commentaire"] = "Unknow Error"
                dico_tmp["Response_code"] = None
            
            dicos[malware["app_displayname"]] = dico_tmp
        
        except KeyError:
            print("i ={}, keyError = {}".format(i, sys.exc_info()[0]))
    
        
    df = pd.DataFrame.from_dict(dicos).T
    
    cols_bool = df.columns.difference(COLS_NOTBOOL)
    df[cols_bool] = df[cols_bool].astype(bool)

    return df

def add_column_df(df, cols):
    """
    add a new column to dataframe doing the percentage of false answers
    
    * select only boolean colum
    * count number of False answes to each row
    * calculte the percentage of False answer to each row and put in a new colum percent_ans  
    """
    
    df.loc[:,"percent_ans"] = (df.select_dtypes(include=["bool"]) == False).sum(axis=1) / df.shape[1]
    df["percent_ans"] = df["percent_ans"].apply(lambda x: round(x, 3))
    
    labels = ["mauvais", "moyen", "acceptable", "excellent"]
    df["percent_ans_lab"] = pd.cut(df["percent_ans"], 
                                   bins = [-0.5,0.5,0.7,0.9,1],
                                   labels = labels)
    
    return df[cols]
###############################################################################
#       get result of file analysis from virusTotal ---> Fin
###############################################################################

###############################################################################
#       QUOTA get result of file analysis from virusTotal ---> Debut
###############################################################################
def get_report_quotas(filename):
    """
    get report of various apps in the filename list respecting API quotas.
    
    @params : 
        filename : a json file
    """
    url = URL_BASE + "file/report"
    params = {"apikey":APIKEY}
    
    QUOTA = 4
    
    malwares_list = list()
    with open(filename) as json_file:
        malwares_list = json.load(json_file)
        
    
    i = 0
    while i < math.ceil(len(malwares_list[:NUM_ITEMS]) / QUOTA):
        malwares_4 = malwares_list[QUOTA*i: (1+i)*QUOTA]
        i += 1
        
        dicos = dict()
        print("processing {}-th block of data".format(i))
        for idx, malware in enumerate(malwares_4):
            dico_tmp = {"Version": malware["app_version"], 
                         "Date": malware["date"]}
            try:
                params["resource"] = malware["app_sha1_sig"]
                
                response = requests.get(url, params=params)
                response.raise_for_status()
                
                dico_tmp["Status_code"] = response.status_code
                
                
                if response.status_code == 200:
                    dico_tmp["Commentaire"] = "OK."
                    dico_tmp["Response_code"] = response.json()["response_code"]
                    dico_tmp["Scan_id"] = response.json()["scan_id"]
                    
                    for antivirus, res in response.json()["scans"].items():
                        dico_tmp[antivirus] = res["detected"]
                elif response.status_code == 204:
                    dico_tmp["Scan_id"] = None
                    dico_tmp["Response_code"] = None
                    dico_tmp["Commentaire"] = "Request rate limit exceeded."
                elif response.status_code == 400:
                    dico_tmp["Scan_id"] = None
                    dico_tmp["Response_code"] = None
                    dico_tmp["Commentaire"] = "Bad Request."
                elif response.status_code == 403:
                    dico_tmp["Scan_id"] = ""
                    dico_tmp["Response_code"] = None
                    dico_tmp["Commentaire"] = "No privileges to make the request."
                else:
                    dico_tmp["Scan_id"] = None
                    dico_tmp["Response_code"] = None
                    dico_tmp["Commentaire"] = "Unknow Error"
                
                dicos[malware["app_displayname"]] = dico_tmp
            
            except KeyError:
                commentaire = str(sys.exc_info()[0]) +" "+ str(sys.exc_info()[1])
                dico_tmp["Commentaire"] = commentaire
                dicos[malware["app_displayname"]] = dico_tmp
                print("idx ={}, app={}, keyError = {}".format(
                        idx, malware["app_displayname"], sys.exc_info()))
            except requests.exceptions.HTTPError as errh:
                commentaire = str(errh)
                dico_tmp["Commentaire"] = commentaire
                dicos[malware["app_displayname"]] = dico_tmp
                print("Http Error: {}".format(errh))
            except requests.exceptions.ConnectionError as errc:
                commentaire = str(errc)
                dico_tmp["Commentaire"] = commentaire
                dicos[malware["app_displayname"]] = dico_tmp
                print("Error Connecting: {}".format(errc))
            except requests.exceptions.Timeout as errt:
                commentaire = str(errt)
                dico_tmp["Commentaire"] = commentaire
                dicos[malware["app_displayname"]] = dico_tmp
                print("Timeout Error: {}".format(errt))
            except requests.exceptions.RequestException as err:
                print("OOps: Something Else {}".format(err))
                commentaire = str(err)
                dico_tmp["Commentaire"] = commentaire
                dicos[malware["app_displayname"]] = dico_tmp
                print("OOps: Something Else {}".format(err))
        
        df = pd.DataFrame.from_dict(dicos).T
    
        cols = ["Version", "Date", "Status_code", "Scan_id", "Commentaire"]
        cols_bool = df.columns.difference(COLS_NOTBOOL)
        df[cols_bool] = df[cols_bool].astype(bool)
        
        df = add_column_df(df, COLS)

        ### create list of  rows from dataframe
        list_df = []
        columns = df.columns.tolist()
        columns.insert(0, "")
        list_df.append(columns)
        list_df.extend(df.reset_index().to_numpy().tolist())
        
        
        yield list_df
        ### create list of  rows from dataframe
        
        time.sleep(PUBLIC_API_SLEEP_TIME) # 60
    pass

###############################################################################
#       QUOTA get result of file analysis from virusTotal ---> fin
###############################################################################


def allowed_file(filename):
	return '.' in filename \
            and filename.split('.', 1)[1].lower() in ALLOWED_EXTENSIONS;


# create the application object
app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

@app.route('/')
def upload_form():
	return render_template('index.html')

@app.route('/upload_file', methods=["GET", 'POST'])
def upload_file():
    
    if request.method=="POST":
        if "file" not in request.files:
            flash("No file part")
            return redirect(request.url)
        file = request.files["file"]
        
        if file.filename == "":
            flash("No file selected for updating")
            return redirect(request.url) #render_template('upload_file.html')
        
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            flash('File successfully uploaded')
            
            df = get_report(filename)
            df = add_column_df(df, COLS)
            
            list_df = []
            columns = df.columns.tolist()
            columns.insert(0, "")
            list_df.append(columns)
            list_df.extend(df.reset_index().to_numpy().tolist())
            
            return render_template('/upload_file.html', 
                                   filename = filename, 
                                   tables = list_df,
                                   titles=df.columns.values) #redirect('/lookupMalware')
        else:
            flash('Allowed file types are {}'.format(ALLOWED_EXTENSIONS))
            return redirect(request.url) #render_template('upload_file.html')
    else:
        return render_template("upload_file.html")
    

def stream_template(template_name, **context):
    app.update_template_context(context)
    t = app.jinja_env.get_template(template_name)
    rv = t.stream(context)
    rv.disable_buffering()
    return rv

@app.route('/upload_file_quota', methods=["GET", 'POST'])
def upload_file_quota():
    if request.method=="POST":
        if "file" not in request.files:
            flash("No file part")
            return redirect(request.url)
        file = request.files["file"]
        
        if file.filename == "":
            flash("No file selected for updating")
            return redirect(request.url) #render_template('upload_file.html') 
        
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            flash('File successfully uploaded')
            
            
            generator_df = get_report_quotas(filename)
            return Response(
                    stream_with_context(
                            stream_template("/upload_file_quota.html", 
                                            filename = filename, 
                                            tables = generator_df, 
                                            titles=COLS
                                            )
                                        )
                            )

        else:
            flash('Allowed file types are {}'.format(ALLOWED_EXTENSIONS))
            return redirect(request.url) #render_template('upload_file.html')
    else:
        return render_template("upload_file_quota.html")


if __name__ == "__main__":
    
    app.secret_key = 'super secret key'
    app.config['SESSION_TYPE'] = 'filesystem'
    
    PUBLIC_API_SLEEP_TIME = int(sys.argv[1])
    
    app.run(debug=True)
